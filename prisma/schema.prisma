generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username      String? @map("username")
  rank          String @default("person")
  phoneNumber   String?
  mailcom       String?

  application      Application?
  posts            Post[]
  files            File[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Application {
  id  String  @id @default(cuid())
  title String
  
  name String
  email String
  phoneNumber String
  
  date DateTime @default(now())
  userId String @map("user_id")

  fileId String @map("file_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}

model Post {
  id  String  @id @default(cuid())
  title String
  fileId String @map("file_id") 
  date DateTime @default(now())
  userId String @map("user_id")

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([fileId])
}

model File {
  id  String  @id @default(cuid())
  url String
  userId String @map("user_id")
  publicAuthority String @default("R") // R read W write D delete
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([url])
}